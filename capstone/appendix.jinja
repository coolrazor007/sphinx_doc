


Appendix A
===============

Here's the original project 3 description from class:

DESCRIPTION

Create a CI/CD Pipeline to convert the legacy development process to a DevOps process.

Background of the problem statement:
A leading US healthcare company, Aetna, with a large IT structure had a 12-week release cycle and their business was impacted due to the legacy process. To gain
true business value through faster feature releases, better service quality, and cost optimization, they wanted to adopt agility in their build and release process.
The objective is to implement iterative deployments, continuous innovation, and automated testing through the assistance of the strategy.

Implementation requirements:

    Install and configure the Jenkins architecture on AWS instance
    Use the required plugins to run the build creation on a containerized platform
    Create and run the Docker image which will have the application artifacts
    Execute the automated tests on the created build
    Create your private repository and push the Docker image into the repository
    Expose the application on the respective ports so that the user can access the deployed application
    Remove container stack after completing the job

The following tools must be used:

    EC2
    Jenkins
    Docker
    Git

The following things to be kept in check:

    You need to document the steps and write the algorithms in them.
    The submission of your Github repository link is mandatory. In order to track your tasks, you need to share the link of the repository.
    Document the step-by-step process starting from creating test cases, the executing it, and recording the results.
    You need to submit the final specification document, which includes:

    Project and tester details
    Concepts used in the project
    Links to the GitHub repository to verify the project completion
    Your conclusion on enhancing the application and defining the USPs (Unique Selling Points)


Appendix B
===============

.. note:: 
  These are the main files for the project (there are more)

Main install script that also orchestrates the whole thing

.. literalinclude:: ../infrastructure-deployment.sh

The two Terraform files meant for creating the two EC2 instances

.. literalinclude:: ../jenkins.tf

.. literalinclude:: ../pipeline.tf

Clever Terraform output file that creates several configuration files (and quality of life files)

.. literalinclude:: ../output.tf

This is the Jenkinsfile that is the CI/CD pipeline

.. literalinclude:: ../Jenkinsfile

Here we have the playbook for Ansible that configures everything.  It isn't much to look at itself as I use roles for configuration

.. literalinclude:: ../main.yml
