

********************************************
Introduction
********************************************

This project is about automation and standing up a CI/CD pipeline for Sphinx artifacts.  The idea is to take archaic documentation tools (like Word Docs) and create HTML/PDF documenation via code instead.  Our artifacts are that very documentation.  To put it into context of the ficticious company the assignment is for, they had trouble keeping their flyers and website updated.  It seemed that it would take weeks to get changes implemented from idea to webpage and print documentation as well.  Often the two were out of sync as well.

Enter in Sphinx!  Sphinx is a documentation tool for creating web pages and PDF files using Jinja and RST code.  By using this code we can now put the documentation in GIT and errors are greatly reduced by adding in pull requests and other processes to maintain checks.  Further, the same tool to update the website is the same tool to update the print media.  

This project implementation is a proof-of-concept on how we can use Sphinx to improve our overall documenation.  In order to showcase the power of Sphinx this entire project will render the documentation for itself and create a CI/CD pipeline to do so!  Meaning if you follow the steps in this project you will have a pipeline that in turn creates this document as an HTML as well as a PDF.

While our project does this it also checks for basic (very basic) unit tests against the documentation thus reducing errors.

The tools required for the project are Terraform, Ansible, Docker and Python to deploy the VMs to handle the entire pipeline.  However, this has been entirely automated in the install script.  So get your Ubuntu VM ready we are about to DevOps a pipeline!